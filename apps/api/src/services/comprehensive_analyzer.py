"""
ComprehensiveAnalyzer - Unified analysis engine
Replaces scattered nlp.py functions with batched, efficient analysis
"""

from __future__ import annotations
import asyncio
import json
import hashlib
from typing import Dict, Any, List, Optional, Tuple, Union
from dataclasses import dataclass
from enum import Enum

from src.services.llm_client import get_llm_client, LLMRequest, generate_json


class AnalysisType(str, Enum):
    HR_CRITERIA = "hr_criteria"
    JOB_FIT = "job_fit"
    HIRING_DECISION = "hiring_decision"
    CANDIDATE_PROFILE = "candidate_profile"
    SOFT_SKILLS = "soft_skills"
    REQUIREMENTS_EXTRACTION = "requirements_extraction"


@dataclass
class AnalysisInput:
    """Input data for comprehensive analysis"""
    job_description: str = ""
    transcript_text: str = ""
    resume_text: str = ""
    candidate_name: str = ""
    job_title: str = ""
    analysis_types: Optional[List[AnalysisType]] = None
    
    def __post_init__(self):
        if self.analysis_types is None:
            self.analysis_types = [
                AnalysisType.HR_CRITERIA,
                AnalysisType.JOB_FIT,
                AnalysisType.HIRING_DECISION
            ]


class ComprehensiveAnalyzer:
    """
    Unified analyzer that replaces scattered nlp.py functions
    Uses batched LLM calls for efficiency
    """
    
    def __init__(self):
        self.llm_client = get_llm_client()
    
    def _create_hr_criteria_prompt(self, transcript: str) -> str:
        """Create HR criteria analysis prompt"""
        return f"""Sen deneyimli bir HR uzmanÄ±sÄ±n. AÅŸaÄŸÄ±daki mÃ¼lakat transkriptini analiz et ve her kriter iÃ§in objektif, kanÄ±ta dayalÄ± deÄŸerlendirme yap.

DEÄžERLENDIRME KRÄ°TERLERÄ°:
1. Ä°letiÅŸim NetliÄŸi (0-100): AÃ§Ä±k ifade, yapÄ±landÄ±rÄ±lmÄ±ÅŸ cevaplar, dinleme becerisi
2. Problem Ã‡Ã¶zme (0-100): Analitik dÃ¼ÅŸÃ¼nme, Ã§Ã¶zÃ¼m odaklÄ±lÄ±k, yaratÄ±cÄ±lÄ±k
3. TakÄ±m Ã‡alÄ±ÅŸmasÄ± (0-100): Birlikte Ã§alÄ±ÅŸma Ã¶rnekleri, iÅŸbirliÄŸi, Ã§atÄ±ÅŸma yÃ¶netimi
4. Liderlik (0-100): Ä°nisiyatif alma, yÃ¶nlendirme, sorumluluk Ã¼stlenme
5. BÃ¼yÃ¼me Zihniyeti (0-100): Ã–ÄŸrenme isteÄŸi, hatalardan ders alma, geliÅŸim odaklÄ±lÄ±k

PUANLAMA REHBERÄ°:
- 90-100: MÃ¼kemmel, Ã§ok gÃ¼Ã§lÃ¼ kanÄ±tlar
- 80-89: GÃ¼Ã§lÃ¼, net pozitif Ã¶rnekler
- 70-79: Ä°yi, bazÄ± pozitif gÃ¶stergeler
- 60-69: Orta, sÄ±nÄ±rlÄ± kanÄ±t
- 50-59: ZayÄ±f, minimal kanÄ±t
- 0-49: Yetersiz, kanÄ±t yok veya negatif

ZORUNLU JSON FORMAT:
{{
  "criteria": [
    {{
      "label": "Ä°letiÅŸim NetliÄŸi",
      "score_0_100": 85,
      "evidence": "Sorulara yapÄ±landÄ±rÄ±lmÄ±ÅŸ ve net cevaplar verdi.",
      "confidence": 0.9,
      "reasoning": "3 farklÄ± Ã¶rnekte net aÃ§Ä±klama ve somut detaylar saÄŸladÄ±."
    }}
  ],
  "summary": "Genel HR deÄŸerlendirme Ã¶zeti",
  "overall_score": 78.5,
  "meta": {{
    "total_response_time": "18 dakika",
    "answer_depth": "orta",
    "evidence_quality": "gÃ¼Ã§lÃ¼"
  }}
}}

MÃœLAKAT TRANSKRÄ°PTÄ°:
{transcript[:6000]}"""
    
    def _create_job_fit_prompt(self, job_desc: str, transcript: str, resume: str) -> str:
        """Create job fit analysis prompt"""
        return f"""Sen senior bir iÅŸe alÄ±m uzmanÄ±sÄ±n. Ä°ÅŸ tanÄ±mÄ±, Ã¶zgeÃ§miÅŸ ve mÃ¼lakat transkriptini detaylÄ± analiz et.

GÃ–REV: Her iÅŸ gereksinimini adayÄ±n profiliyle eÅŸleÅŸtir ve kanÄ±t seviyesini deÄŸerlendir.

KAYNAK TIPLERI:
- cv: Ã–zgeÃ§miÅŸte yazÄ±lÄ±/belgelenmiÅŸ
- interview: MÃ¼lakatta sÃ¶zlÃ¼ olarak kanÄ±tlanmÄ±ÅŸ  
- both: Hem Ã¶zgeÃ§miÅŸte hem mÃ¼lakatta teyit edilmiÅŸ
- neither: HiÃ§birinde kanÄ±t yok

KARÅžILAMA SEVÄ°YELERÄ°:
- yes: Tam olarak karÅŸÄ±lÄ±yor (gÃ¼Ã§lÃ¼ kanÄ±t)
- partial: KÄ±smen karÅŸÄ±lÄ±yor (sÄ±nÄ±rlÄ± kanÄ±t)
- no: KarÅŸÄ±lamÄ±yor (kanÄ±t yok)

ZORUNLU JSON FORMAT:
{{
  "job_fit_summary": "3-4 cÃ¼mlelik genel deÄŸerlendirme",
  "overall_fit_score": 0.75,
  "cv_existing_skills": ["Ã–zgeÃ§miÅŸte net olan yetenekler"],
  "interview_demonstrated": ["MÃ¼lakatta kanÄ±tlanan yetenekler"],
  "clear_gaps": ["AÃ§Ä±k eksiklik gÃ¶steren alanlar"],
  "requirements_matrix": [
    {{
      "label": "Spesifik yetenek/gereksinim",
      "meets": "yes|partial|no",
      "source": "cv|interview|both|neither",
      "evidence": "Somut kanÄ±t/Ã¶rnek",
      "confidence": 0.9,
      "importance": "high|medium|low"
    }}
  ],
  "recommendations": ["Spesifik iÅŸe alÄ±m Ã¶nerisi"],
  "risk_factors": ["Potansiyel risk alanlarÄ±"],
  "competitive_advantages": ["AdayÄ±n Ã¶ne Ã§Ä±kan artÄ±larÄ±"]
}}

Ä°Åž TANIMI:
{job_desc[:4500]}

Ã–ZGEÃ‡MIÅž:
{(resume or 'Ã–zgeÃ§miÅŸ bilgisi mevcut deÄŸil')[:3500]}

MÃœLAKAT TRANSKRÄ°PTÄ°:
{transcript[:4500]}"""
    
    def _create_hiring_decision_prompt(self, job_desc: str, transcript: str, resume: str) -> str:
        """Create hiring decision analysis prompt"""
        return f"""Sen deneyimli bir CTO ve hiring manager'sÄ±n. Ä°ÅŸ tanÄ±mÄ±, Ã¶zgeÃ§miÅŸ ve mÃ¼lakat transkriptine gÃ¶re yapÄ±landÄ±rÄ±lmÄ±ÅŸ iÅŸe alÄ±m kararÄ± ver.

GÃ–REV: Objektif, veri-destekli ve uygulama-odaklÄ± karar analizi yap.

DEÄžERLENDIRME Ã‡ERÃ‡EVESÄ°:
1. Teknik yeterlilik (iÅŸ gereksinimleri vs aday profili)
2. YumuÅŸak beceriler (takÄ±m uyumu, iletiÅŸim, liderlik)
3. BÃ¼yÃ¼me potansiyeli (Ã¶ÄŸrenme hÄ±zÄ±, adaptasyon)
4. KÃ¼ltÃ¼rel uyum (ÅŸirket deÄŸerleri, Ã§alÄ±ÅŸma tarzÄ±)
5. Risk faktÃ¶rleri (kÄ±rmÄ±zÄ± bayraklar, endiÅŸe alanlarÄ±)

HÄ°RE RECOMMENDATÄ°ON SEVÄ°YELERÄ°:
- Strong Hire: Kesinlikle iÅŸe alÄ±nmalÄ±, role mÃ¼kemmel uyum
- Hire: Ä°ÅŸe alÄ±nmalÄ±, gereksinimleri karÅŸÄ±lÄ±yor
- Hold: KararsÄ±z, ek bilgi/mÃ¼lakat gerekli
- No Hire: Ä°ÅŸe alÄ±nmamalÄ±, Ã¶nemli eksiklikler var

ZORUNLU JSON FORMAT:
{{
  "hire_recommendation": "Strong Hire|Hire|Hold|No Hire",
  "overall_assessment": "4-5 cÃ¼mlelik yapÄ±landÄ±rÄ±lmÄ±ÅŸ genel deÄŸerlendirme",
  "decision_confidence": 0.85,
  "key_strengths": ["Spesifik gÃ¼Ã§lÃ¼ yÃ¶n 1 (kanÄ±tla)"],
  "key_concerns": ["Spesifik endiÅŸe 1 (gerekÃ§eyle)"],
  "skill_match": {{
    "technical_fit": 0.8,
    "soft_skills_fit": 0.7,
    "cultural_fit": 0.9,
    "growth_potential": 0.8
  }},
  "salary_analysis": {{
    "candidate_expectation": "AdayÄ±n maaÅŸ beklentisi (varsa)",
    "market_alignment": "market_appropriate|too_high|too_low|belirtilmedi",
    "recommended_range": "Ã–nerilen maaÅŸ aralÄ±ÄŸÄ±",
    "negotiation_notes": "MaaÅŸ mÃ¼zakeresi stratejisi"
  }},
  "risk_factors": ["Potansiyel risk 1"],
  "mitigation_strategies": ["Risk azaltma Ã¶nerisi"],
  "next_steps": ["Ã–nerilen sonraki adÄ±m"],
  "timeline_recommendation": "immediate|1_week|2_weeks|reassess"
}}

Ä°Åž TANIMI:
{job_desc[:4000]}

Ã–ZGEÃ‡MIÅž:
{(resume or 'Ã–zgeÃ§miÅŸ bilgisi mevcut deÄŸil')[:2500]}

MÃœLAKAT TRANSKRÄ°PTÄ°:
{transcript[:4500]}"""
    
    def _create_candidate_profile_prompt(self, resume: str, job_desc: str) -> str:
        """Create candidate profile summary prompt"""
        return f"""AÅŸaÄŸÄ±daki Ã¶zgeÃ§miÅŸi analiz et ve iÅŸ ilanÄ±na gÃ¶re Ã¶z bir deÄŸerlendirme yap. 
Maksimum 4-5 cÃ¼mle ile ÅŸu bilgileri ver:

ðŸ“‹ **Profil Ã–zeti**: Deneyim seviyesi, ana uzmanlÄ±k alanlarÄ± ve eÄŸitim durumu
ðŸŽ¯ **Ä°ÅŸ UygunluÄŸu**: Ä°lan gereksinimlerine uygunluk ve Ã¶ne Ã§Ä±kan yetenekler
ðŸš€ **Ã–ne Ã‡Ä±kan BaÅŸarÄ±lar**: En dikkat Ã§ekici proje/deneyim (varsa)
ðŸ’¡ **Genel DeÄŸerlendirme**: KÄ±sa bir iÅŸe alÄ±m Ã¶nerisi

TÃ¼rkÃ§e ve profesyonel bir dil kullan. Ã‡ok uzun olmasÄ±n, Ã¶z ve net ol.

Ä°ÅŸ Ä°lanÄ±: {job_desc[:3000] or 'BelirtilmemiÅŸ'}

Ã–zgeÃ§miÅŸ:
{resume[:4000]}"""
    
    def _create_soft_skills_prompt(self, transcript: str, job_desc: str) -> str:
        """Create soft skills extraction prompt"""
        return f"""AÅŸaÄŸÄ±daki yanÄ±ttan soft-skills Ã§Ä±kar ve kÄ±sa Ã¶zet ver. 
YanÄ±t TÃ¼rkÃ§e olabilir. JSON dÃ¶n: {{"soft_skills":[{{"label":str,"confidence":0-1,"evidence":str}}],"summary":str}}.

Ä°ÅŸ tanÄ±mÄ±: {job_desc[:2000] or '-'}

YanÄ±t: {transcript[:4000]}"""
    
    def _create_requirements_extraction_prompt(self, job_desc: str) -> str:
        """Create requirements extraction prompt"""
        return f"""AÅŸaÄŸÄ±daki iÅŸ ilanÄ±ndan gereksinimleri Ã§Ä±kar ve normalize et. JSON dÃ¶n.
Åžema: {{"items":[{{"id":str,"label":str,"must":bool,"level":"junior|mid|senior|lead","weight":0-1,"keywords":[str],"success_rubric":str,"question_templates":[str]}}]}}

Ä°lan Metni:
{job_desc[:5000]}"""
    
    async def _run_single_analysis(self, analysis_type: AnalysisType, input_data: AnalysisInput) -> Tuple[AnalysisType, Union[Dict[str, Any], str]]:
        """Run single analysis type"""
        try:
            if analysis_type == AnalysisType.HR_CRITERIA:
                if not input_data.transcript_text.strip():
                    return analysis_type, {}
                
                prompt = self._create_hr_criteria_prompt(input_data.transcript_text)
                result = await generate_json(prompt, temperature=0.05)
                
                # Normalize result
                if not isinstance(result.get("criteria"), list):
                    result["criteria"] = []
                
                for criterion in result.get("criteria", []):
                    criterion.setdefault("confidence", 0.5)
                    criterion.setdefault("reasoning", "")
                
                return analysis_type, result
            
            elif analysis_type == AnalysisType.JOB_FIT:
                if not (input_data.job_description.strip() and input_data.transcript_text.strip()):
                    return analysis_type, {}
                
                prompt = self._create_job_fit_prompt(
                    input_data.job_description,
                    input_data.transcript_text,
                    input_data.resume_text
                )
                result = await generate_json(prompt, temperature=0.1)
                
                # Normalize result
                if not isinstance(result.get("requirements_matrix"), list):
                    result["requirements_matrix"] = []
                
                for req in result.get("requirements_matrix", []):
                    req.setdefault("confidence", 0.5)
                    req.setdefault("importance", "medium")
                
                result.setdefault("overall_fit_score", 0.0)
                return analysis_type, result
            
            elif analysis_type == AnalysisType.HIRING_DECISION:
                if not (input_data.job_description.strip() and input_data.transcript_text.strip()):
                    return analysis_type, {}
                
                prompt = self._create_hiring_decision_prompt(
                    input_data.job_description,
                    input_data.transcript_text,
                    input_data.resume_text
                )
                result = await generate_json(prompt, temperature=0.05)
                
                # Normalize result
                result.setdefault("decision_confidence", 0.5)
                result.setdefault("timeline_recommendation", "reassess")
                
                skill_match = result.setdefault("skill_match", {})
                skill_match.setdefault("technical_fit", 0.5)
                skill_match.setdefault("soft_skills_fit", 0.5)
                skill_match.setdefault("cultural_fit", 0.5)
                skill_match.setdefault("growth_potential", 0.5)
                
                return analysis_type, result
            
            elif analysis_type == AnalysisType.CANDIDATE_PROFILE:
                if not input_data.resume_text.strip():
                    return analysis_type, {"profile": ""}
                
                prompt = self._create_candidate_profile_prompt(
                    input_data.resume_text,
                    input_data.job_description
                )
                result = await self.llm_client.generate(LLMRequest(
                    prompt=prompt,
                    temperature=0.3,
                    max_tokens=500
                ))
                
                # Clean up formatting
                import re
                text = result.content.strip()
                text = re.sub(r"\n{3,}", "\n\n", text)
                
                return analysis_type, {"profile": text}
            
            elif analysis_type == AnalysisType.SOFT_SKILLS:
                if not input_data.transcript_text.strip():
                    return analysis_type, {}
                
                prompt = self._create_soft_skills_prompt(
                    input_data.transcript_text,
                    input_data.job_description
                )
                result = await generate_json(prompt, temperature=0.2)
                return analysis_type, result
            
            elif analysis_type == AnalysisType.REQUIREMENTS_EXTRACTION:
                if not input_data.job_description.strip():
                    return analysis_type, {"items": []}
                
                prompt = self._create_requirements_extraction_prompt(input_data.job_description)
                result = await generate_json(prompt, temperature=0.1)
                
                # Defensive normalization
                items = result.get("items") if isinstance(result, dict) else None
                if not isinstance(items, list):
                    return analysis_type, {"items": []}
                
                for i, item in enumerate(items):
                    if not isinstance(item, dict):
                        continue
                    item.setdefault("id", f"req_{i}")
                    item["weight"] = float(item.get("weight", 0.5) or 0.5)
                    
                    kws = item.get("keywords") or []
                    if not isinstance(kws, list) or not kws:
                        item["keywords"] = [item.get("label", "")]
                    
                    templates = item.get("question_templates") or []
                    if not isinstance(templates, list) or not templates:
                        item["question_templates"] = [f"{item.get('label','')} ile ilgili somut bir Ã¶rnek anlatÄ±r mÄ±sÄ±nÄ±z?"]
                
                return analysis_type, {"items": items}
            
            else:
                return analysis_type, {}
        
        except Exception as e:
            # Log error but don't fail entire batch
            return analysis_type, {"error": str(e)}
    
    async def analyze_comprehensive(self, input_data: AnalysisInput) -> Dict[str, Any]:
        """
        Run comprehensive analysis with multiple types in parallel
        Replaces multiple nlp.py functions with single efficient call
        """
        
        # Create tasks for parallel execution
        analysis_types = input_data.analysis_types or []
        tasks = [
            self._run_single_analysis(analysis_type, input_data)
            for analysis_type in analysis_types
        ]
        
        # Run all analyses in parallel
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # Collect results
        analysis_results = {}
        for result in results:
            if isinstance(result, Exception):
                continue
            
            if isinstance(result, tuple) and len(result) == 2:
                try:
                    analysis_type, data = result
                    analysis_results[analysis_type.value] = data
                except (TypeError, ValueError, AttributeError):
                    # Handle unpacking errors gracefully
                    continue
        
        # Calculate overall score from HR criteria if available
        overall_score = None
        hr_data = analysis_results.get(AnalysisType.HR_CRITERIA.value)
        if isinstance(hr_data, dict):
            criteria = hr_data.get("criteria", [])
            if criteria:
                try:
                    scores = [
                        float(c.get("score_0_100", 0.0)) 
                        for c in criteria 
                        if isinstance(c, dict)
                    ]
                    if scores:
                        overall_score = round(sum(scores) / len(scores), 2)
                except Exception:
                    pass
        
        # Add metadata
        analysis_results["meta"] = {
            "analysis_types": [t.value for t in (input_data.analysis_types or [])],
            "overall_score": overall_score,
            "input_sizes": {
                "job_description": len(input_data.job_description),
                "transcript": len(input_data.transcript_text),
                "resume": len(input_data.resume_text)
            },
            "candidate_name": input_data.candidate_name,
            "job_title": input_data.job_title
        }
        
        return analysis_results


# Convenience functions that maintain compatibility with old nlp.py interface
async def comprehensive_interview_analysis(
    job_desc: str,
    transcript_text: str,
    resume_text: str = "",
    candidate_name: str = "",
    job_title: str = ""
) -> Dict[str, Any]:
    """
    Main comprehensive analysis function - replaces multiple nlp.py functions
    """
    analyzer = ComprehensiveAnalyzer()
    
    input_data = AnalysisInput(
        job_description=job_desc,
        transcript_text=transcript_text,
        resume_text=resume_text,
        candidate_name=candidate_name,
        job_title=job_title,
        analysis_types=[
            AnalysisType.HR_CRITERIA,
            AnalysisType.JOB_FIT,
            AnalysisType.HIRING_DECISION
        ]
    )
    
    return await analyzer.analyze_comprehensive(input_data)


async def extract_requirements_spec(job_desc: str) -> Dict[str, Any]:
    """Extract job requirements - maintains compatibility"""
    if not job_desc.strip():
        return {"items": []}
    
    analyzer = ComprehensiveAnalyzer()
    input_data = AnalysisInput(
        job_description=job_desc,
        analysis_types=[AnalysisType.REQUIREMENTS_EXTRACTION]
    )
    
    result = await analyzer.analyze_comprehensive(input_data)
    return result.get(AnalysisType.REQUIREMENTS_EXTRACTION.value, {"items": []})


async def summarize_candidate_profile(resume_text: str, job_desc: str = "") -> str:
    """Summarize candidate profile - maintains compatibility"""
    if not resume_text.strip():
        return ""
    
    analyzer = ComprehensiveAnalyzer()
    input_data = AnalysisInput(
        resume_text=resume_text,
        job_description=job_desc,
        analysis_types=[AnalysisType.CANDIDATE_PROFILE]
    )
    
    result = await analyzer.analyze_comprehensive(input_data)
    profile_data = result.get(AnalysisType.CANDIDATE_PROFILE.value, {})
    if isinstance(profile_data, dict):
        return profile_data.get("profile", "")
    return str(profile_data) if profile_data else ""


# Backward compatibility functions (deprecated but maintained)
async def assess_hr_criteria(transcript_text: str) -> Dict[str, Any]:
    """Deprecated: Use comprehensive_interview_analysis instead"""
    analyzer = ComprehensiveAnalyzer()
    input_data = AnalysisInput(
        transcript_text=transcript_text,
        analysis_types=[AnalysisType.HR_CRITERIA]
    )
    result = await analyzer.analyze_comprehensive(input_data)
    return result.get(AnalysisType.HR_CRITERIA.value, {})


async def assess_job_fit(job_desc: str, transcript_text: str, resume_text: str = "") -> Dict[str, Any]:
    """Deprecated: Use comprehensive_interview_analysis instead"""
    analyzer = ComprehensiveAnalyzer()
    input_data = AnalysisInput(
        job_description=job_desc,
        transcript_text=transcript_text,
        resume_text=resume_text,
        analysis_types=[AnalysisType.JOB_FIT]
    )
    result = await analyzer.analyze_comprehensive(input_data)
    return result.get(AnalysisType.JOB_FIT.value, {})


async def opinion_on_candidate(job_desc: str, transcript_text: str, resume_text: str = "") -> Dict[str, Any]:
    """Deprecated: Use comprehensive_interview_analysis instead"""
    analyzer = ComprehensiveAnalyzer()
    input_data = AnalysisInput(
        job_description=job_desc,
        transcript_text=transcript_text,
        resume_text=resume_text,
        analysis_types=[AnalysisType.HIRING_DECISION]
    )
    result = await analyzer.analyze_comprehensive(input_data)
    return result.get(AnalysisType.HIRING_DECISION.value, {})
